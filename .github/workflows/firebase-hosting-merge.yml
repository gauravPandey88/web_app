# On pushes or pull requests to the main branch of the repo,
# this action will run `flutter build web`, and deploy the web app
# to the linked Firebase project.
#
# Setup: Firebase Hosting must be set up in your Firebase project.
# See https://firebase.google.com/docs/hosting/github-integration.
#
# Run `firebase init` -> "Set up GitHub Action deploys" in order to generate
# a value for `secrets.FIREBASE_SERVICE_ACCOUNT_MYPROJECT` which this
# script needs. Running `init` will also generate some yaml action files; they
# can be removed and replaced with this one.
#
# Modify FIREBASE_SERVICE_ACCOUNT_MYPROJECT and FIREBASE_PROJECT_NAME (Lines 56/58).

name: Flutter build web and mobile
on:
  push:
    branches:
      - main
jobs:
  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Set up Xcode
        run: sudo xcode-select --switch /Applications/Xcode_12.5.app

      - name: Decrypt and install certificates and provisioning profiles
        run: |
          mkdir -p ~/certs
          openssl aes-256-cbc -K ${{ secrets.CERT_KEY }} -iv ${{ secrets.CERT_IV }} -in certs/certs.tar.enc -out certs/certs.tar -d
          tar xvf certs/certs.tar -C ~/certs
          sudo mkdir -p /Users/runner/Library/MobileDevice/Provisioning\ Profiles
          sudo cp ~/certs/*.mobileprovision /Users/runner/Library/MobileDevice/Provisioning\ Profiles/
          security import ~/certs/Certificates.p12 -P ${{ secrets.CERT_PASSWORD }}

      - name: Build IPA
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
        run: flutter build ios --release --no-codesign

      - name: Package IPA
        run: |
          xcodebuild -exportArchive -archivePath build/ios/iphoneos/Runner.xcarchive \
          -exportPath build/ios/ipa \
          -exportOptionsPlist exportOptions.plist

      - name: Upload IPA
        uses: actions/upload-artifact@v2
        with:
          name: app-release
          path: build/ios/ipa/Runner.ipa
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'
      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Build APK
        run: flutter build apk --release

      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
  build_web:
    name: Build Flutter (Web)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.22.0' # Replace with your project's version of Flutter.
          channel: 'stable'
      - run: flutter pub get
      - run: flutter config --enable-web
      - run: flutter build web
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: web-build
          path: build/web
  deploy:
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: web-build
          path: build/web
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_WEB_APP_KMY3V3 }}'
          channelId: live
          projectId: web-app-kmy3v3