# On pushes or pull requests to the main branch of the repo,
# this action will run `flutter build web`, and deploy the web app
# to the linked Firebase project.
#
# Setup: Firebase Hosting must be set up in your Firebase project.
# See https://firebase.google.com/docs/hosting/github-integration.
#
# Run `firebase init` -> "Set up GitHub Action deploys" in order to generate
# a value for `secrets.FIREBASE_SERVICE_ACCOUNT_MYPROJECT` which this
# script needs. Running `init` will also generate some yaml action files; they
# can be removed and replaced with this one.
#
# Modify FIREBASE_SERVICE_ACCOUNT_MYPROJECT and FIREBASE_PROJECT_NAME (Lines 56/58).

name: Flutter build web and mobile
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
#  build:
#    name : Build & Release
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v2
#        with:
#            distribution: 'adopt'
#            java-version: '17'
#
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.22.0'
#          channel: 'stable'
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      - name: Build APK
#        run: flutter build apk --release
#
#
#      - name: Push to Release
#        uses: ncipollo/release-action@v1
#        with:
#          artifacts: build/app/outputs/flutter-apk/app-release.apk
#          tag: v1.1.${{ github.run_number }}
#          token: ${{ secrets.FIREBASE_TOKEN }}
#          name: Firebase Deploy
#
#      # build here
#      - name: Upload apk artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: app-artifacts
#          path: |
#            build/app/outputs/flutter-apk/app-release.apk
#
#
#  distribute_android_build:
#    needs: build
#    name : Deploy apk to the Firebase
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v1
#        with:
#          java-version: '12.0.0'
#      - uses: actions/download-artifact@v2
#        with:
#          name: app-artifacts
#
#      - name: Download and Set Up Firebase CLI
#        run: curl -sL https://firebase.tools | bash
#
#      - name: Upload artifact to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          debug: true
#          appId: ${{secrets.ANDROID_FIREBASE_APP_ID}}
#          serviceCredentialsFileContent: ${{secrets.CREDENTIAL_FILE_CONTENT}}
#          groups: test
#          file: app-release.apk


#  build-ios:
#    name: Build iOS IPA
#    runs-on: macos-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.22.0'
#          channel: 'stable'
#
#      - name: Install dependencies
#        run: flutter pub get
#
#      - name: Set up Xcode
#        run: sudo xcode-select --switch /Applications/Xcode_15.4.app
#
##      - name: Decrypt and install certificates and provisioning profiles
##        run: |
##          mkdir -p ~/certs
##          openssl aes-256-cbc -K ${{ secrets.CERT_KEY }} -iv ${{ secrets.CERT_IV }} -in certs/certs.tar.enc -out certs/certs.tar -d
##          tar xvf certs/certs.tar -C ~/certs
##          sudo mkdir -p /Users/runner/Library/MobileDevice/Provisioning\ Profiles
##          sudo cp ~/certs/*.mobileprovision /Users/runner/Library/MobileDevice/Provisioning\ Profiles/
##          security import ~/certs/Certificates.p12 -P ${{ secrets.CERT_PASSWORD }}
#
#      - name: Build IPA
##        env:
##          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
##          APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
#        run: flutter build ios --release --no-codesign
#
#      - name: Package IPA
#        run: |
#          xcodebuild -exportArchive -archivePath build/ios/iphoneos/Runner.xcarchive \
#          -exportPath build/ios/ipa \
#          -exportOptionsPlist exportOptions.plist
#
#      - name: Upload IPA
#        uses: actions/upload-artifact@v2
#        with:
#          name: app-release
#          path: build/ios/ipa/Runner.ipa

  build_web:
    name: Build Flutter (Web)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.22.0' # Replace with your project's version of Flutter.
          channel: 'stable'
      - run: flutter pub get
      - run: flutter config --enable-web
      - run: flutter build web
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: web-build
          path: build/web
  deploy:
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: web-build
          path: build/web
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}'
          channelId: live
          projectId: web-app-kmy3v3